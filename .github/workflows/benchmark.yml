name: BWA-MEM2 Performance Benchmark

on: push

jobs:
  bwa-mem2-benchmark:
    runs-on: "${{ matrix.os }}"
    strategy:
      matrix:
        include:
          - rust: stable
            os: ubuntu-latest
            features: ""
            target: "x86_64-unknown-linux-gnu"
#          - rust: "stable"
#            os: ubuntu-24.04-arm
#            features: ""
#            target: "aarch64-unknown-linux-gnu"
#          - rust: "stable"
#            os: macos-latest
#            features: ""
#            target: "aarch64-apple-darwin"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential zlib1g-dev libbz2-dev liblzma-dev wget art-nextgen-simulation-tools valgrind

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

# BWA-MEM2 and zlibâ‚‹* variants prep
#
      - name: Checkout bwa-mem2 w/ latest bioconda patches applied
        uses: actions/checkout@v4
        with:
          repository: "dslarm/bwa-mem2"
          ref: "sse2neon"
          submodules: true
          path: bwa-mem2

      - name: Checkout zlib-rs
        uses: actions/checkout@v4
        with:
          repository: "trifectatechfoundation/zlib-rs"
          path: bwa-mem2/ext/zlib-rs

      - name: Checkout zlib-ng
        uses: actions/checkout@v4
        with:
          repository: "zlib-ng/zlib-ng"
          path: bwa-mem2/ext/zlib-ng

      - name: Compile zlib-rs C bindings
        working-directory: bwa-mem2/ext/zlib-rs/libz-rs-sys-cdylib
        run: |
          cargo build --release --no-default-features --features "c-allocator,gz"
          ls -alh target/release/libz_rs.so && nm target/release/libz_rs.so | grep gz

      - name: Compile zlib-ng in compat mode
        working-directory: bwa-mem2/ext/zlib-ng
        run: |
          ./configure --zlib-compat
          make -j$(nproc)

# TODO: Fix for OSX runner since it'll not be a .so file
      - name: Compile all zlib-* variants of bwa-mem2
        working-directory: bwa-mem2
        run: |
          # zlib (system's default lib)
          cp -f Makefile Makefile.orig
          make -j$(nproc) EXE=bwa-mem2-zlib && make clean
          # zlib-ng patching
          sed -i s'#-lz#$(PWD)/ext/zlib-ng/libz.so#' Makefile
          make -j$(nproc) EXE=bwa-mem2-zlib-ng && make clean
          # zlib-rs patching
          cp Makefile.orig Makefile
          sed -i s'#-lz#$(PWD)/ext/zlib-rs/libz-rs-sys-cdylib/target/release/libz_rs.so#' Makefile
          make -j$(nproc) EXE=bwa-mem2-zlib-rs && make clean
          cp Makefile.orig Makefile
          ldd bwa-mem2*

# Bioinformatics
#
      - name: Download E. coli reference genome and rename it to ecoli.fa
        working-directory: bwa-mem2
        run: |
          wget ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/005/845/GCF_000005845.2_ASM584v2/GCF_000005845.2_ASM584v2_genomic.fna.gz
          gunzip GCF_000005845.2_ASM584v2_genomic.fna.gz && mv GCF_000005845.2_ASM584v2_genomic.fna ecoli.fa

      - name: Index reference genome with bwa-mem2
        working-directory: bwa-mem2
        run: |
          time ./bwa-mem2-zlib index ecoli.fa

      - name: Simulate some e.coli reads with a fixed seed (666)
        working-directory: bwa-mem2
        run: |
          art_illumina -ss HS25 -i ecoli.fa -rs 666 -l 100 -f 1 -o ecoli_art_illumina_simlated_reads

# Simulate reads (above) instead of downloading and uncompressing real data
#
#      - name: Download E. coli sample reads
#        run: |
#          wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR258/000/SRR2584863/SRR2584863_1.fastq.gz
#          wget ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR258/000/SRR2584863/SRR2584863_2.fastq.gz

      - name: Align reads with bwa-mem2 (with system's zlib)
        working-directory: bwa-mem2
        run: |
          ldd bwa-mem2-zlib
          ./bwa-mem2-zlib mem ecoli.fa ecoli_art_illumina_simlated_reads.fq > alignment.sam
      - name: Align reads with bwa-mem2 (patching functions for zlib-ng)
        env:
          LD_LIBRARY_PATH: "$PWD/ext/zlib-ng/libz.so"
          LD_PRELOAD: "$PWD/ext/zlib-ng/libz.so"
        working-directory: bwa-mem2
        run: |
           ldd bwa-mem2-zlib-ng
           ./bwa-mem2-zlib-ng mem ecoli.fa ecoli_art_illumina_simlated_reads.fq > alignment.sam
      - name: Align reads with bwa-mem2 (patching functions for zlib-rs)
        env:
          LD_LIBRARY_PATH: "$PWD/ext/zlib-rs/libz-rs-sys-cdylib/target/release/libz_rs.so"
          LD_PRELOAD: "$PWD/ext/zlib-rs/libz-rs-sys-cdylib/target/release/libz_rs.so"
        working-directory: bwa-mem2
        run: |
          ldd bwa-mem2-zlib-rs
          ./bwa-mem2-zlib-rs mem ecoli.fa ecoli_art_illumina_simlated_reads.fq > alignment.sam

# TODO: Requires patching bwa-mem2/src/profiling.cpp using google/benchmark library calls, WIP
#
#      - name: Run benchmarks w/ codspeed.io
#        uses: CodSpeedHQ/action@v3
#        with:
#          token: ${{ secrets.CODSPEED_TOKEN }}
#          run: |
#            cd bwa-mem2
#            ./bwa-mem2 mem ecoli.fa ecoli_art_illumina_simlated_reads.fq > alignment.sam

#      - name: Convert SAM to BAM and sort
#        run: |
#          sudo apt-get install -y samtools
#          samtools view -Sb bwa-mem2-perf/alignment.sam | samtools sort -o alignment.sorted.bam

#      - name: Index BAM file
#        run: |
#          samtools index alignment.sorted.bam
